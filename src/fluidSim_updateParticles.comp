/// Data structure reference:
///     "Multi-Level Memory Structures for Simulating and Rendering Smoothed Particle Hydrodynamics"
///     by R. Winchenbach and A. Kolb.

#version 450
#include "fluidSim_util.comp.h"

layout(local_size_x_id = 0) in; // specialization constant

layout(binding = 0, std140) uniform Uniforms {

    // stuff that may change every frame
    vec3 domain_min_;

    // stuff whose lifetime is the lifetime of the sim parameters
    float rest_particle_density_;
    float particle_interaction_radius_;
    float spring_rest_length_;
    float spring_stiffness_;
    float cell_size_reciprocal_;

    // stuff whose lifetime is the lifetime of the sim
    uint particle_count_;
    uint hash_modulus_;
};
layout(binding = 1, std430) readonly buffer PositionsIn { vec3 positions_in_[]; };
layout(binding = 2, std430) readonly buffer VelocitiesIn { vec3 velocities_in_[]; };
layout(binding = 3, std430) writeonly buffer PositionsOut { vec3 positions_out_[]; };
layout(binding = 4, std430) writeonly buffer VelocitiesOut { vec3 velocities_out_[]; };
layout(binding = 5, std430) readonly buffer CBegin { uint C_begin_[]; };
layout(binding = 6, std430) readonly buffer CLength { uint C_length_[]; };
layout(binding = 7, std430) readonly buffer HBegin { uint H_begin_[]; };
layout(binding = 8, std430) readonly buffer HLength { uint H_length_[]; };

layout(push_constant, std140) uniform PushConstants {

    float delta_t_;
    uint cell_count_;
};


uint mortonCodeHash(uint cell_morton_code, uint hash_modulus) {
    return cell_morton_code % hash_modulus;
}


struct CompactCell {
    uint first_particle_idx;
    uint particle_count;
};

CompactCell cell3dToCell(const uvec3 cell_idx_3d, const vec3 domain_min) {

    const uint morton_code = cellMortonCode(cell_idx_3d);
    const uint hash = mortonCodeHash(morton_code, hash_modulus_);

    const uint first_cell_with_hash_idx = H_begin_[hash];
    const uint n_cells_with_hash = H_length_[hash];

    CompactCell ret;
    ret.first_particle_idx = 0xFFFFFFFF;
    ret.particle_count = 0;

    if (n_cells_with_hash == 0) return ret;

    uint cell_idx = first_cell_with_hash_idx;
    const uint cell_idx_end = cell_idx + n_cells_with_hash;

    for (; cell_idx < cell_idx_end; cell_idx++)
    {
        const uint first_particle_in_cell_idx = C_begin_[cell_idx];

        const vec3 first_particle_in_cell = positions_in_[first_particle_in_cell_idx];
        if (
            cellMortonCode(cellIndex(first_particle_in_cell, domain_min, cell_size_reciprocal_))
            == morton_code
        ) {
            ret.first_particle_idx = first_particle_in_cell_idx;
            ret.particle_count = C_length_[cell_idx];
            return ret;
        }
    }

    return ret;
}

CompactCell particleToCell(const vec3 particle, const vec3 domain_min) {

    const uvec3 cell_idx_3d = cellIndex(particle, domain_min, cell_size_reciprocal_);
    return cell3dToCell(cell_idx_3d, domain_min);
}

vec3 accelerationDueToParticlesInCell(
    const uint target_particle_idx,
    const uvec3 cell_idx_3d,
    const vec3 domain_min
) {

    const CompactCell cell = cell3dToCell(cell_idx_3d, domain_min);
    if (cell.particle_count == 0) return vec3(0.0f); // cell doesn't exist

    const vec3 pos = positions_in_[target_particle_idx];

    vec3 accel = vec3(0.0f);

    uint i = cell.first_particle_idx;
    const uint i_end = i + cell.particle_count;

    for (; i < i_end; i++)
    {
        // OPTIMIZE: we can remove this check if we know that none of the particles are the target particle.
        //     E.g. if the particle list comes from a different cell than the target particle.
        if (i == target_particle_idx) continue;

        vec3 disp = positions_in_[i] - pos;
        float dist = length(disp);

        if (dist >= particle_interaction_radius_) continue;
        vec3 disp_unit = disp / dist;
        if (dist < 1e-7) continue; // OPTIMIZE remove this check?

        accel += spring_stiffness_ * (dist - spring_rest_length_) * disp_unit;
    }

    return accel;
}

uvec3 offsetCell(uvec3 cell_idx, int x, int y, int z) {

    // OPTIMIZE: 
    //     1. figure out whether wrapping behavior is guaranteed for unsigned ints.
    //     2. if yes, delete this function and just do `cell_idx + uvec3(x, y, z)` at the call site.

    if (x == -1 && cell_idx.x == 0) cell_idx.x = 0xFFFFFFFF;
    else cell_idx.x += x;

    if (y == -1 && cell_idx.y == 0) cell_idx.y = 0xFFFFFFFF;
    else cell_idx.y += y;

    if (z == -1 && cell_idx.z == 0) cell_idx.z = 0xFFFFFFFF;
    else cell_idx.z += z;

    return cell_idx;
}

void main(void) {

    const uint particle_idx = gl_GlobalInvocationID.x;
    const bool this_invocation_should_run = particle_idx < particle_count_;

    if (this_invocation_should_run)
    {
        vec3 accel_i = vec3(0);

        const vec3 pos_i = positions_in_[particle_idx];
        const uvec3 cell_index_3d = cellIndex(pos_i, domain_min_, cell_size_reciprocal_);

        accel_i += accelerationDueToParticlesInCell(particle_idx, offsetCell(cell_index_3d, -1, -1, -1), domain_min_);
        accel_i += accelerationDueToParticlesInCell(particle_idx, offsetCell(cell_index_3d, -1, -1,  0), domain_min_);
        accel_i += accelerationDueToParticlesInCell(particle_idx, offsetCell(cell_index_3d, -1, -1,  1), domain_min_);
        accel_i += accelerationDueToParticlesInCell(particle_idx, offsetCell(cell_index_3d, -1,  0, -1), domain_min_);
        accel_i += accelerationDueToParticlesInCell(particle_idx, offsetCell(cell_index_3d, -1,  0,  0), domain_min_);
        accel_i += accelerationDueToParticlesInCell(particle_idx, offsetCell(cell_index_3d, -1,  0,  1), domain_min_);
        accel_i += accelerationDueToParticlesInCell(particle_idx, offsetCell(cell_index_3d, -1,  1, -1), domain_min_);
        accel_i += accelerationDueToParticlesInCell(particle_idx, offsetCell(cell_index_3d, -1,  1,  0), domain_min_);
        accel_i += accelerationDueToParticlesInCell(particle_idx, offsetCell(cell_index_3d, -1,  1,  1), domain_min_);
        accel_i += accelerationDueToParticlesInCell(particle_idx, offsetCell(cell_index_3d,  0, -1, -1), domain_min_);
        accel_i += accelerationDueToParticlesInCell(particle_idx, offsetCell(cell_index_3d,  0, -1,  0), domain_min_);
        accel_i += accelerationDueToParticlesInCell(particle_idx, offsetCell(cell_index_3d,  0, -1,  1), domain_min_);
        accel_i += accelerationDueToParticlesInCell(particle_idx, offsetCell(cell_index_3d,  0,  0, -1), domain_min_);
        accel_i += accelerationDueToParticlesInCell(particle_idx, offsetCell(cell_index_3d,  0,  0,  0), domain_min_);
        accel_i += accelerationDueToParticlesInCell(particle_idx, offsetCell(cell_index_3d,  0,  0,  1), domain_min_);
        accel_i += accelerationDueToParticlesInCell(particle_idx, offsetCell(cell_index_3d,  0,  1, -1), domain_min_);
        accel_i += accelerationDueToParticlesInCell(particle_idx, offsetCell(cell_index_3d,  0,  1,  0), domain_min_);
        accel_i += accelerationDueToParticlesInCell(particle_idx, offsetCell(cell_index_3d,  0,  1,  1), domain_min_);
        accel_i += accelerationDueToParticlesInCell(particle_idx, offsetCell(cell_index_3d,  1, -1, -1), domain_min_);
        accel_i += accelerationDueToParticlesInCell(particle_idx, offsetCell(cell_index_3d,  1, -1,  0), domain_min_);
        accel_i += accelerationDueToParticlesInCell(particle_idx, offsetCell(cell_index_3d,  1, -1,  1), domain_min_);
        accel_i += accelerationDueToParticlesInCell(particle_idx, offsetCell(cell_index_3d,  1,  0, -1), domain_min_);
        accel_i += accelerationDueToParticlesInCell(particle_idx, offsetCell(cell_index_3d,  1,  0,  0), domain_min_);
        accel_i += accelerationDueToParticlesInCell(particle_idx, offsetCell(cell_index_3d,  1,  0,  1), domain_min_);
        accel_i += accelerationDueToParticlesInCell(particle_idx, offsetCell(cell_index_3d,  1,  1, -1), domain_min_);
        accel_i += accelerationDueToParticlesInCell(particle_idx, offsetCell(cell_index_3d,  1,  1,  0), domain_min_);
        accel_i += accelerationDueToParticlesInCell(particle_idx, offsetCell(cell_index_3d,  1,  1,  1), domain_min_);

        const vec3 old_velocity = velocities_in_[particle_idx];
        vec3 new_velocity = old_velocity;
        new_velocity += accel_i * delta_t_;
        new_velocity -= 0.5f * delta_t_ * old_velocity; // damping
        velocities_out_[particle_idx] = new_velocity;

        positions_out_[particle_idx] = pos_i + delta_t_ * new_velocity;
    }
}

